name: Merge Queue

on:
  merge_group:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ labeled, unlabeled, opened, reopened, synchronize ]
  check_run:
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  validate:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.pull_request.labels.*.name, 'ready-to-merge') ||
      (github.event_name == 'check_run' && github.event.check_run.conclusion == 'success')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov coverage
    
    - name: Check if PR is up to date
      if: github.event_name == 'pull_request'
      run: |
        git fetch origin main
        if [ "$(git rev-parse HEAD)" != "$(git rev-parse origin/main)" ]; then
          echo "PR needs to be updated with main"
          gh pr comment "$PR_NUMBER" --body "⚠️ This PR needs to be updated with the latest main branch."
          exit 1
        fi
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run tests with coverage
      env:
        MEETUP_API_KEY: ${{ secrets.MEETUP_API_KEY || 'dummy_key' }}
        EVENTBRITE_API_KEY: ${{ secrets.EVENTBRITE_API_KEY || 'dummy_key' }}
      run: |
        python -m pytest --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: asish-tom/community_event_aggregator
        flags: merge-validation
        fail_ci_if_error: true
    
    - name: Check coverage threshold
      run: |
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "Coverage below threshold: $COVERAGE%"
          exit 1
        fi
    
    - name: Enable auto-merge
      if: success() && github.event_name == 'pull_request'
      run: |
        gh pr merge --auto --squash "$PR_NUMBER" --title="${{ github.event.pull_request.title }}" --body="${{ github.event.pull_request.body }}"
        gh pr comment "$PR_NUMBER" --body "✅ Auto-merge enabled. PR will be merged once all checks pass."
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  merge_group:
    runs-on: ubuntu-latest
    if: github.event_name == 'merge_group'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      env:
        MEETUP_API_KEY: ${{ secrets.MEETUP_API_KEY || 'dummy_key' }}
        EVENTBRITE_API_KEY: ${{ secrets.EVENTBRITE_API_KEY || 'dummy_key' }}
      run: |
        python -m pytest