name: Merge Queue

on:
  pull_request:
    types: [labeled, unlabeled, opened, reopened, synchronize]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: write
  statuses: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.pull_request.labels.*.name, 'ready-to-merge') ||
      github.event_name == 'pull_request_review'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov coverage
    
    - name: Run tests with coverage
      env:
        MEETUP_API_KEY: ${{ secrets.MEETUP_API_KEY || 'dummy_key' }}
        EVENTBRITE_API_KEY: ${{ secrets.EVENTBRITE_API_KEY || 'dummy_key' }}
      run: |
        python -m pytest --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: asish-tom/community_event_aggregator
        flags: merge-validation
        fail_ci_if_error: true
    
    - name: Check coverage threshold
      id: coverage
      run: |
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "Coverage below threshold: $COVERAGE%"
          exit 1
        fi
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
    
    - name: Approve PR
      if: success()
      run: |
        gh pr review $PR_NUMBER --approve
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Enable Auto-Merge
      if: success()
      run: |
        # Configure Git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Enable auto-merge with squash
        gh pr merge $PR_NUMBER --auto --squash --delete-branch
        gh pr comment $PR_NUMBER --body "âœ… All checks passed. Coverage: ${{ steps.coverage.outputs.coverage }}%. Auto-merge enabled."
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update Branch
      if: failure()
      run: |
        git fetch origin main
        git checkout $BRANCH_NAME
        git rebase origin/main
        git push --force-with-lease origin $BRANCH_NAME
      env:
        BRANCH_NAME: ${{ github.head_ref }}

  merge_group:
    runs-on: ubuntu-latest
    if: github.event_name == 'merge_group'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      env:
        MEETUP_API_KEY: ${{ secrets.MEETUP_API_KEY || 'dummy_key' }}
        EVENTBRITE_API_KEY: ${{ secrets.EVENTBRITE_API_KEY || 'dummy_key' }}
      run: |
        python -m pytest